@@ @onCampaignLoad
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=X ; tooltip= ; minWidth= ; 
[r:lib="@"+getMacroLocation()]
[r:macro="T"]
[r:macro+lib]
[defineFunction(macro, macro+lib)]
[r:macro="MakeMarker"]
[defineFunction(macro, macro+lib)]
[r:macro="CheckMarkerPartner"]
[defineFunction(macro, macro+lib)]
[r:macro="GetMarkerPartner"]
[defineFunction(macro, macro+lib)]
[r:macro="GetAllMarkers"]
[defineFunction(macro, macro+lib)]
[r:macro="SaveMarker"]
[defineFunction(macro, macro+lib)]

[r:macro="GetMapMarkers"]
[defineFunction(macro, macro+lib)]

[r:macro="GetMarker"]
[defineFunction(macro, macro+lib)]
[r:macro="EditMarker"]
[defineFunction(macro, macro+lib)]

[r:macro="PartnerDialog"]
[defineFunction(macro, macro+lib)]

[r:macro="GetPartner"]
[defineFunction(macro, macro+lib)]

[r:macro="SaveMarkerJSON"]
[defineFunction(macro, macro+lib)]

[r:macro="GetPartnerCoords"]
[defineFunction(macro, macro+lib)]
[r:macro="Teleport"]
[defineFunction(macro, macro+lib)]
[r:macro="TeleportList"]
[defineFunction(macro, macro+lib)]
[r:macro="isCurrentMap"]
[defineFunction(macro, macro+lib)]

!!
@@ @CheckMarkers
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group= ; tooltip= ; minWidth= ; 
[h:junk="Will check markers to see if they still exist on the map and try to fix them"]
[h:currentMap=getCurrentMapName()]
[h:mapMarkers=GetMapMarkers(currentMap)]
[h:mapMarkersSave=mapMarkers]

[h:ids=json.fields(mapMarkers)]
[h:reprocess=""]
[h,foreach(id,ids), code:{
  [markerStuff=json.get(mapMarkers,id)]
  [t=findToken(id)]
  [if(t==""), code:{
    [name=json.get(markerStuff,"name")]
    [newId=findToken(name)]
    [reprocess=json.append(reprocess,json.set("","oldId",id,"newId",newId,"name",name))]
  };{
    [x=getTokenX(0,id)]
    [y=getTokenY(0,id)]
    [markerStuff=json.set(markerStuff,"x",x,"y",y)]
  }]
}]
[h:Debug("Reprocess List",reprocess)]

[h,foreach(rep,reprocess), code:{
  [name=json.get(rep,"name")]
  [oldId=json.get(rep,"name")]
  [newId=json.get(rep,"name")] 
  [if(newId==""), code:{
    [mapMarkers=json.remove(mapMarkers,oldId)]
  };{
    [markerStuff=json.get(mapMarkers,oldId)]
    [mapMarkers=json.remove(mapMarkers,oldId)]
    [x=getTokenX(0,newId)]
    [y=getTokenY(0,newId)]
    [markerStuff=json.set(markerStuff,"x",x,"y",y)]
    [mapMarkers=json.set(mapMarkers,newId,markerStuff)]    
  }]
}]

[h:allMarkers=GetAllMarkers()]
[h:allMarkersSave=allMarkers]
[h:allMarkers=json.set(allMarkers,currentMap,mapMarkers)]

Old Marers = [r:allMarkersSave]<br>
New Markers = [r:allMarkers]<br>
[Debug("old",allMarkersSave)]
[Debug("new",allMarkers)]
[h:assert(0,"ending for now")]

[h:junk = "now build partner list to see if those partners are still in existence"]
[h:partners=""]
[h:maps=json.fields(allMarkers)]
[h,foreach(map,maps), code:{
  [mapMarkers=json.get(allMarkers,map)]
  [ids=json.fields(mapMarkers)]
[Debug("ids",ids)]
  [foreach(id,ids), code:{
    [markerStuff=json.get(mapMarkers,id)]
    [partner=json.get(markerStuff,"partner")]
    [pid=json.get(partner,"pid")]
[h:Debug("pid",pid)]
    [if(pid!=""): partners=json.append(partners,json.set(partner,"map",map,"id",id))]
  }]
}]

[h:junk="now twizzle partners into something matching the markers json object"]
[h:allPartners=""]
[h,foreach(partner,partners), code:{
  [pmap=json.get(partner,"pmap")]
  [pid=json.get(partner,"pid")]
  [map=json.get(partner,"map")]
  [id=json.get(partner,"id")]
  [pname=json.get(partner,"pname")]
  [pobj=json.set("","pname",pname,"id",id,"map",map)]
  [mapPartners=json.get(allPartners,pmap)]
  [mapPartners=json.set(mapPartners,pid,pobj)]
  [allPartners=json.set(allPartners,pmap,mapPartners)]
}]

[h:junk="now now go through partners to make sure they still exist. Need to finish"]
[h:pmaps=json.fields(allPartners)]
[h:dropPartners=""]
[h,foreach(pmap,pmaps), code:{
  [mapMarkers=json.get(allMarkers(pmap)]
  [ids=json.fields(mapMarkers,"json")]
  [mapPartners=json.get(allPartners,pmap)]
  [pids=json.fields(mapPartners,"json")]
  [inBoth=json.intersection(ids,pids)]
}]

!!
@@ @EditMarker
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=true ; group= ; tooltip= ; minWidth= ; 
[h:map=arg(0)]
[h:id=arg(1)]
[h:marker=GetMarker(map,id)]
[h:markerType=json.get(marker,"type")]

[h:types=getLibProperty("MarkerTypes")]
[h:index=listFind(types,markerType)]
[h:index=if(index==-1,0,index)]

[h:status=input(
"newType|"+types+"|Marker Type|LIST|SELECT="+index+" VALUE=STRING"
)]
[h:type=newType]
[h:junk="did the above to set Token property"]

[h:junk="Blast,Teleport1WayAuto, Teleport2WayAuto, Teleport1Way, Teleport2Way. Trap, TrapPcOnly, Terrain, LandingPad, Generic"]

[r,switch(newType),code:
case "Blast": {
Blast stuff
  [h:marker=json.set(marker,"type",newType)]
};
case "Teleport1WayAuto": {
Teleport 1 Way Auto Stuff
  [h:marker=json.set(marker,"type",newType)]
  [h:partner=PartnerDialog(map,id)]
  [h:marker=json.set(marker,"partner",partner)]
  [h:SaveMarkerJSON(map,id,marker)]
};
case "Teleport2WayAuto": {
Teleport 2 Way Auto Stuff
  [h:marker=json.set(marker,"type",newType)]
};
case "Teleport1Way": {
Teleport 1 Way Stuff
  [h:marker=json.set(marker,"type",newType)]
};
case "Teleport2Way": {
Teleport 2 Way Stuff
  [h:marker=json.set(marker,"type",newType)]
};
case "Trap": {
Trap Stuff
  [h:marker=json.set(marker,"type",newType)]
};
case "TrapPcOnly": {
Trap for pcs only stuff
  [h:marker=json.set(marker,"type",newType)]
};
case "Terrain": {
Terrain stuff
  [h:marker=json.set(marker,"type",newType)]
};
case "LandingPad": {
Landing Pad stuff
  [h:marker=json.set(marker,"type",newType)]
};
default: {
Generic stuff
  [h:marker=json.set(marker,"type",newType)]
}]

!!
@@ @MakeMarker
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group= ; tooltip= ; minWidth= ; 
[h:id=arg(0)]
[tokenType=getPropertyType(id)]

[h:abortit=if(getPropertyType(id)!="Basic"&&getPropertyType(id)!="Vehicle"&&getPropertyType(id)!="Marker",0,1)]
[h:assert(abortit,"You can only create these macros on Basic, Vehicle, and Marker type tokens")]
[h:argLength=json.length(macro.args)]

[h,if(argLength>1): makerType=arg(1)]

[h:tokenType="Marker"]
[setPropertyType(tokenType, id)]

[h:SaveMarker(getCurrentMapName(),id,"Generic",getName(id))]

[h:setState("Marker", 1,id)]

[h:macros=json.append("","Activate Macro","Remove","Set Type","Pick Partner","Got To Partner")]
[foreach(m,macros,""), code:{
  [h:idx=getMacroIndexes(m)]
  [if(idx!=""):removeMacro(idx)]
}]

[if(getPropertyType()==tokenType), code:{
[h:macroName="Activate Macro"]
[h:command=encode("[macro('CharacterSheet@Lib:Marker'): 'Activate']")]
[h:command = command + encode("[abort(0)]")]
[h:macroProps="autoexec=true;"]
[if(hasMacro(macroName)), code: {
  [getName()] already has [macroName] on token
};{
  [h:createMacro(macroName, decode(command), macroProps)]
  [macroName] Button added.
}]
};{}]

[if(getPropertyType()==tokenType), code:{
[h:macroName="Remove"]
[h:command=encode("[macro('CharacterSheet@Lib:Marker'): 'Activate']")]
[h:command = command + encode("[abort(0)]")]
[h:macroProps="autoexec=true;"]
[if(hasMacro(macroName)), code: {
  [getName()] already has [macroName] on token
};{
  [h:createMacro(macroName, decode(command), macroProps)]
  [macroName] Button added.
}]
};{}]

[if(getPropertyType()==tokenType), code:{
[h:macroName="Set Type"]
[h:command=encode("[macro('CharacterSheet@Lib:Marker'): 'Activate']")]
[h:command = command + encode("[abort(0)]")]
[h:macroProps="autoexec=true;"]
[if(hasMacro(macroName)), code: {
  [getName()] already has [macroName] on token
};{
  [h:createMacro(macroName, decode(command), macroProps)]
  [macroName] Button added.
}]
};{}]

[if(getPropertyType()==tokenType), code:{
[h:macroName="Pick Partner"]
[h:command=encode("[macro('CharacterSheet@Lib:Marker'): 'Activate']")]
[h:command = command + encode("[abort(0)]")]
[h:macroProps="autoexec=true;"]
[if(hasMacro(macroName)), code: {
  [getName()] already has [macroName] on token
};{
  [h:createMacro(macroName, decode(command), macroProps)]
  [macroName] Button added.
}]
};{}]

[if(getPropertyType()==tokenType), code:{
[h:macroName="Got To Partner"]
[h:command=encode("[macro('CharacterSheet@Lib:Marker'): 'Activate']")]
[h:command = command + encode("[abort(0)]")]
[h:macroProps="autoexec=true;"]
[if(hasMacro(macroName)), code: {
  [getName()] already has [macroName] on token
};{
  [h:createMacro(macroName, decode(command), macroProps)]
  [macroName] Button added.
}]
};{}]

!!
@@ @RemoveMarker
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group= ; tooltip= ; minWidth= ; 
[h:id=arg(0)]
[h:pid=checkPartner(id)]

!!
@@ @SaveMarker
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group= ; tooltip= ; minWidth= ; 
[h:argLength=json.length(macro.args)]

[h:map=arg(0)]
[h:id=arg(1)]
[h:type=arg(2)]
[h:markerStuff=""]
[h:i=3]
[h,if(argLength>i): name=arg(i);name=getName(id)]
[h:i=i+1]
[h,if(argLength>i): macro=arg(i);macro=""]
[h:i=i+1]
[h,if(argLength>i): partner=arg(i);partner="{}"]

[h:currentMap=getCurrentMapName()]
[h:currentMap=if(map=="",currentMap,map)]

[h,if(currentMap==map), code:{
  [x=getTokenX(0, id)]
  [y=getTokenY(0, id)]
  [markerStuff=json.set(markerStuff,"x",x)]
  [markerStuff=json.set(markerStuff,"y",y)]
};{
[Debug("if","token not on current map "+getMacroName())]
}]

[h:partner=""]
[h:markerStuff=json.set(markerStuff,"type",type,"name",name)]
[h,if(macro!=""): markerStuff=json.set(markerStuff,"macro",macro)]
[h,if(partner!=""): markerStuff=json.set(markerStuff,"partner",partner)]

[h:SaveMarkerJSON(map,id,markerStuff)]

!!
@@ @SaveMarkerJSON
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group= ; tooltip= ; minWidth= ; 
[h:Debug("in","SaveMarkerJSON")]
[h:map=arg(0)]
[h:id=arg(1)]
[h:markerStuff=arg(2)]
[h:name=json.get(markerStuff,"name")]
[h:Debug("args",macro.args)]
[h:mapMarkers=GetMapMarkers(map)]
[h:Debug("mapMarkers",mapMarkers)]
[h:mapMarkers=json.set(mapMarkers,id,markerStuff)]
[h:allMarkers=GetAllMarkers()]
[h:allMarkers=json.set(allMarkers,map,mapMarkers)]
[h:setLibProperty("Markers",allMarkers)]

[h:Debug("mapMarkers",mapMarkers)]

[h:junk="sweep current map and remove dead entries"]
[h:Debug("at",junk)]

[h:currentMap=getCurrentMapName()]
[h:mapMarkers=GetMapMarkers(currentMap)]
[h:ids=json.fields(mapMarkers)]
[h,foreach(id,ids), code:{
  [test=findToken(id)]
  [if(test==""), code:{
    [mapMarkers=json.remove(mapMarkers,id)]
  };{
    [markerStuff=json.get(mapMarkers,id)]
    [x=getTokenX(0,id)]
    [y=getTokenY(0,id)]
    [markerStuff=json.set(markerStuff,"x",x,"y",y)]
    [mapMarkers=json.set(mapMarkers,id,markerStuff)]
  }]
}]
[h:allMarkers=json.set(allMarkers,currentMap,mapMarkers)]

[h:junk="now clean dead maps"]
[h:Debug("at",junk)]

[h:allMaps=getAllMapNames("json")]
[h:maps=json.fields(allMarkers)]
[h,foreach(map,maps), code:{
  [there=json.contains(allMaps,map)]
  [if(!there): json.remove(allMarkers,map)]
}]

[h:junk="now fix or remove partners"]
[h:Debug("at",junk)]

[Debug("Markers",allMarkers)]
h:setLibProperty("Markers",allMarkers)

!!
@@ @T
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group= ; tooltip= ; minWidth= ; 
[r:msg="Hi"]

!!
@@ @CheckMarkerPartner
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=2 - Partners ; tooltip= ; minWidth= ; 
[h:id=arg(0)]
[h:pid=GetMarkerPartner(id)]
[h:startMap=getCurrentMapName()]
[h:maps=getAllMapNames()]
[h:partner=GetMarkerPartner(id)]

[h:pmap=json.get(partner,"map")]
[h:pid=json.get(partner,"id")]

[if(startMap!=pmap): setCurrentMap(pmap)]
[r:partnerName=getName(pid)]

[h,if(partnerName==""): assert(0,"Cannot find partner token")]

[h:setCurrentMap(startMap)
[r:

!!
@@ @GetMarkerPartner
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=2 - Partners ; tooltip= ; minWidth= ; 
[h:id=arg(0)]
[h:partner=getProperty("Partner",id)]
[h,if(json.type(partner)=="OBJECT"), code:{
  [h:rtn=partner]
};{
  [h:rtn=json.set("","pid","","map",getCurrentMapName())]
}]
[r:rtn]

!!
@@ @GetAllMarkers
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=1 - Gets and Sets ; tooltip= ; minWidth= ; 
[h:markers=getLibProperty("Markers")]
[r:markers=if(json.type(markers)!="OBJECT","{}",markers)]

!!
@@ @GetMapMarkers
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=1 - Gets and Sets ; tooltip= ; minWidth= ; 
[h:map=arg(0)]
[h:allMarkers=GetAllMarkers()]
[h:mapMarkers=json.get(allMarkers,map)]
[r:mapMarkers=if(json.type(mapMarkers)!="OBJECT","{}",mapMarkers)]

!!
@@ @GetMarker
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=1 - Gets and Sets ; tooltip= ; minWidth= ; 
[h:map=arg(0)]
[h:id=arg(1)]
[h:mapMarkers=GetMapMarkers(map)]
[h:marker=json.get(mapMarkers,id)]
[h:marker=if(json.type(marker)!="OBJECT","{}",marker)]
[r:marker]

!!
@@ @GetPartner
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=1 - Gets and Sets ; tooltip= ; minWidth= ; 
[h:reqmap=arg(0)]
[h:reqid=arg(1)]
[h:reqMarker=GetMarker(reqmap,reqid)]
[h:reqPartner=json.get(reqMarker,"partner")]
[h,if(json.type(reqPartner)!="OBJECT"): reqPartner="{}"]
[r:reqPartner]

!!
@@ @PartnerDialog
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=1 - Gets and Sets ; tooltip= ; minWidth= ; 
[h:reqmap=arg(0)]
[h:reqid=arg(1)]
[h:reqPartner=GetPartner(reqmap,reqid)]
[h:reqPartnerStr=""]
[h,if(!json.isEmpty(reqPartner)): reqPartnerStr=json.get(reqPartner,"pmap")+":"+json.get(reqPartner,"pname")+":"+json.get(reqPartner,"pid")]

[h:partnerList="[' ']"]
[h:index=0]
[h:there=-1]

[h:allMarkers=GetAllMarkers()]
[h:maps=json.fields(allMarkers,"json")]
[h,foreach(map,maps,""), code:{
  [mapMarkers=GetMapMarkers(map)]
  [marks=json.fields(mapMarkers)]
  [foreach(m,marks,""), code:{
    [stuff=GetMarker(map,m)]
    [name=json.get(stuff,"name")]
    [if(reqid!=m): partnerList=json.append(partnerList,map+":"+name+":"+m)]
  }]
}]
[h:partnerList=json.sort(partnerList)]
[h:there=json.indexOf(partnerList,reqPartnerStr)]

[h,if(there!=-1): index=there]

[h:partnerList=json.toList(partnerList)]

[h:status=input("partnerString|"+partnerList+"|Select Partner Token|LIST|SELECT="+index+" VALUE=STRING")]

[h: map=listGet(partnerString, 0, ":")]
[h: name=listGet(partnerString, 1, ":")]
[h: id=listGet(partnerString, 2, ":")]
[r:rtn=json.set("","pmap",map,"pid",id,"pname",name)]

!!
@@ @GetPartnerCoords
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Teleports And Traps ; tooltip= ; minWidth= ; 
[h:dest=arg(0)]
[h:pmap=json.get(dest,"pmap")]
[h:pid=json.get(dest,"pid")]
[h:there=if(pid=="",0,1)]
[h:assert(there,"Invalid id passed as destination for teleport")]

[h:pname=json.get(dest,"pname")]

[h:mapMarkers=GetMapMarkers(pmap)]
[h,if(json.type(mapMarkers)!="OBJECT"): mapMarkers="{}"]

[h:marker=json.get(mapMarkers,pid)]
[h,if(json.type(marker)!="OBJECT"): marker="{}"]

[h:ptype=json.get(marker,"type")]
[h:there=if(ptype=="",0,1)]
[h:assert(there,"Invalid type passed as destination for teleport")]

[h:currentMap=getCurrentMapName()]
[h:pmap=if(pmap=="",currentMap,pmap)]

[h: maps = getAllMapNames("json")]
[h:junk="check to see if map exists"]
[h:there=json.contains(maps,pmap)]
[h:assert(there,"destination map does not exist ")]

[h:x=json.get(marker,"x")]
[h,if(x==""): x=0]
[h:y=json.get(marker,"y")]
[h,if(y==""): y=0]

[r:dest=json.set(dest,"pmap",pmap,"pid",pid,"pname",pname,"ptype",ptype,"x",x,"y",y)]

!!
@@ @Teleport
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Teleports And Traps ; tooltip= ; minWidth= ; 
[h:junk="This macro recieves a json array of token id's and teleports them to coordinates on another map")]
[h:triggerId=arg(0)]
[h:id=arg(1)]
[h:ids=json.append("",id)]
[h:TeleportList(triggerId,ids)]

!!
@@ @TeleportList
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Teleports And Traps ; tooltip= ; minWidth= ; 
[h:junk="This macro recieves a json array of token id's and teleports them to coordinates on another map")]
[h:triggerId=arg(0)]
[h:triggerX=getTokenX(0, triggerId)]
[h:triggerY=getTokenY(0, triggerId)]
[h:ids=arg(1)]

[h:destination=GetMarkerPartner(triggerId)]
[h:destination=GetPartnerCoords(destination)]
[h:tripMap=json.get(destination,"pmap")]
[h:tripId=json.get(destination,"pid")]
[h:tripX=json.get(destination,"x")]
[h:tripY=json.get(destination,"y")]
[h:Debug("destination",destination)]

[h,foreach(id,ids), code:{
  [h:test=findToken(id)]
  [h,if(test==""): found=0;found=1]
  [h:assert(found,"id not found")]
}]

[h:currentMap=getCurrentMapName()]
[h,if(currentMap==tripMap): thisMap=1;thisMap=0]

[Debug("diving in","to foreach")]

[h,foreach(id,ids), code:{
[Debug("id",id)]
  [idX=getTokenX(0, id)]
  [idY=getTokenY(0, id)]
  [deltaX=triggerX-idX]
  [deltaY=triggerY-idY]
  [if(thisMap), code:{
[Debug("tripId",tripId)]
    [tripX=getTokenX(0, tripId)]
    [tripY=getTokenY(0, tripId)]
    [newX=tripX-deltaX]
    [newY=tripY-deltaY]
[h:Debug("triggerX",triggerX)]
[h:Debug("tripX",tripX)]
[h:Debug("idX",idX)]
[h:Debug("deltaX",deltaX)]
[h:Debug("newX",newX)]
[h:Debug("triggerY",triggerY)]
[h:Debug("tripY",tripY)]
[h:Debug("idY",idY)]
[h:Debug("deltaY",deltaY)]
[h:Debug("newY",newY)]
    [moveToken(newX,newY,0,id)]
[h:Debug("after","moveToken 1")]
  };{
    [moveTokenToMap(id, tripMap, ,tripY+deltaY, 10)]
  }]
}]

!!
@@ @isCurrentMap
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=X ; tooltip= ; minWidth= ; 
[h:map=arg(0)]
[h:currentMap=getCurrentMapName()]
[h:rtn=if(currentMap==map,1,0)]
[r:rtn]

!!
